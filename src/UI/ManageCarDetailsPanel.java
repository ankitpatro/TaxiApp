/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Business.Car;
import Business.CarInformationList;
import java.awt.CardLayout;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ankit
 */
public class ManageCarDetailsPanel extends javax.swing.JPanel {

    private JPanel lowerPanel;
    private CarInformationList carInformationList;

    private static final String NO_OF_AVAILABLE_CARS = "Number of Cars Currently Available";
    private static final String FIRST_AVAILABLE_CAR = "First Available Car";
    private static final String MODEL = "Model";
    private static final String MANUFACTURING_YEAR = "Manufacturing Year";
    private static final String MINIMUM_SEATS = "Minimum Seats";
    private static final String MAXIMUM_SEATS = "Maximum Seats";
    private static final String SERIAL_NUMBER = "Serial Number";
    private static final String MODEL_NUMBER = "Model Number";
    private static final String ALL_MANUFACTURERS = "All Manifacturers";
    private static final String FLEET_CATALOG_UPDATE_TIME = "Fleet Catalog Update Time";
    private static final String CARS_IN_CITY = "Available Cars in City";
    private static final String EXPIRED_MAINTENANCE_CERTIFICATE = "Expired Maintenance Certificate";

    List<Car> newCarList;

    /**
     * Creates new form ManageCarDetailsPanel
     */
    public ManageCarDetailsPanel(JPanel lowerPanel, CarInformationList carInformationList) {
        initComponents();

        this.lowerPanel = lowerPanel;
        this.carInformationList = carInformationList;

        populateTable(carInformationList.getCarList());

        lblSecondarySearch.setVisible(false);
        comboSecondarySearch.setVisible(false);
        comboSecondarySearch.setEnabled(false);
        txtSecondarySearch.setVisible(false);
        btnHideSecondarySearch.setVisible(false);

        populatCarAvailability();

        populateManufacturers(carInformationList.getCarList());
        populateUpdateDatTime(carInformationList);

    }

    public void populateUpdateDatTime(CarInformationList carList) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        txtLastUpdateTime.setText(dtf.format(carList.getLastUpdateTime()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarDetails = new javax.swing.JTable();
        lblAvailableCars = new javax.swing.JLabel();
        comboFirstSearch = new javax.swing.JComboBox();
        txtFirstSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        lblSecondarySearch = new javax.swing.JLabel();
        comboSecondarySearch = new javax.swing.JComboBox();
        txtSecondarySearch = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnSecondarySearch = new javax.swing.JButton();
        btnHideSecondarySearch = new javax.swing.JButton();
        lblSearch1 = new javax.swing.JLabel();
        txtAvailableCars = new javax.swing.JTextField();
        txtLastUpdateTime = new javax.swing.JTextField();
        lblFleetUpdateTime = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lblAllManufacturers = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAllManufacturers = new javax.swing.JTextArea();
        lblUnAvailableCars1 = new javax.swing.JLabel();
        txtUnavailableCars = new javax.swing.JTextField();
        cmbMaxSeats = new javax.swing.JComboBox();
        cmbMinSeats = new javax.swing.JComboBox();
        lblMaxSeats = new javax.swing.JLabel();
        lblMinSeats = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        tblCarDetails.setBackground(new java.awt.Color(204, 204, 204));
        tblCarDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model", "Is Available?", "Serial Number", "Manufacturing Year", "Maximum Seats", "City", "Model Number", "Minimum Seats"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCarDetails);

        lblAvailableCars.setBackground(new java.awt.Color(51, 51, 51));
        lblAvailableCars.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblAvailableCars.setForeground(new java.awt.Color(255, 255, 255));
        lblAvailableCars.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAvailableCars.setText("Total Availabe Cars:");

        comboFirstSearch.setBackground(new java.awt.Color(204, 204, 204));
        comboFirstSearch.setForeground(new java.awt.Color(255, 255, 255));
        comboFirstSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Model", "First Available Car", "Number of Cars Currently Available", "Manufacturing Year", "Minimum Seats", "Maximum Seats", "Serial Number", "Model Number", "All Manifacturers", "Fleet Catalog Update Time", "Available Cars in City", "Expired Maintenance Certificate" }));
        comboFirstSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFirstSearchActionPerformed(evt);
            }
        });

        txtFirstSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstSearchActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(153, 153, 153));
        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnView.setText("View Car Details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblSecondarySearch.setBackground(new java.awt.Color(51, 51, 51));
        lblSecondarySearch.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblSecondarySearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSecondarySearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSecondarySearch.setText("Search By:");

        comboSecondarySearch.setBackground(new java.awt.Color(204, 204, 204));
        comboSecondarySearch.setForeground(new java.awt.Color(255, 255, 255));
        comboSecondarySearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Available Car", "Number of Cars Currently Available", "Model", "Manufacturing Year", "Minimum Seats", "Maximum Seats", "Serial Number", "Model Number", "All Manifacturers", "Fleet Catalog Update Time", "Available Cars in City", "Expired Maintenance Certificate" }));
        comboSecondarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSecondarySearchActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSecondarySearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSecondarySearch.setText("Add Another Search Filter");
        btnSecondarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSecondarySearchActionPerformed(evt);
            }
        });

        btnHideSecondarySearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnHideSecondarySearch.setText("Hide Secondary Search Filter");
        btnHideSecondarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHideSecondarySearchActionPerformed(evt);
            }
        });

        lblSearch1.setBackground(new java.awt.Color(51, 51, 51));
        lblSearch1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblSearch1.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSearch1.setText("Search By:");

        txtAvailableCars.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtAvailableCars.setEnabled(false);
        txtAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvailableCarsActionPerformed(evt);
            }
        });

        txtLastUpdateTime.setEnabled(false);
        txtLastUpdateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastUpdateTimeActionPerformed(evt);
            }
        });

        lblFleetUpdateTime.setBackground(new java.awt.Color(51, 51, 51));
        lblFleetUpdateTime.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblFleetUpdateTime.setForeground(new java.awt.Color(255, 255, 255));
        lblFleetUpdateTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFleetUpdateTime.setText("Fleet Last update Time:");

        btnReset.setBackground(new java.awt.Color(153, 153, 153));
        btnReset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblAllManufacturers.setBackground(new java.awt.Color(51, 51, 51));
        lblAllManufacturers.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblAllManufacturers.setForeground(new java.awt.Color(255, 255, 255));
        lblAllManufacturers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAllManufacturers.setText("All Car Manufacturers");

        txtAllManufacturers.setColumns(20);
        txtAllManufacturers.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtAllManufacturers.setRows(5);
        jScrollPane2.setViewportView(txtAllManufacturers);

        lblUnAvailableCars1.setBackground(new java.awt.Color(51, 51, 51));
        lblUnAvailableCars1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblUnAvailableCars1.setForeground(new java.awt.Color(255, 255, 255));
        lblUnAvailableCars1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUnAvailableCars1.setText("Total Unavailabe Cars:");

        txtUnavailableCars.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtUnavailableCars.setEnabled(false);
        txtUnavailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnavailableCarsActionPerformed(evt);
            }
        });

        cmbMaxSeats.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9" }));

        cmbMinSeats.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));

        lblMaxSeats.setForeground(new java.awt.Color(255, 255, 255));
        lblMaxSeats.setText("Max Seats");

        lblMinSeats.setForeground(new java.awt.Color(255, 255, 255));
        lblMinSeats.setText("Min Seats");

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton1.setText("Find Available Cars with seats Selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAllManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(273, 273, 273)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cmbMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cmbMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(jButton1))
                                    .addComponent(lblMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 311, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(47, 47, 47)
                                        .addComponent(lblAvailableCars)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(comboFirstSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtFirstSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblUnAvailableCars1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtUnavailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblFleetUpdateTime)
                                        .addGap(24, 24, 24)
                                        .addComponent(txtLastUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnHideSecondarySearch)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane1))
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFleetUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnavailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUnAvailableCars1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtLastUpdateTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFirstSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHideSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSecondarySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAllManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboFirstSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFirstSearchActionPerformed

        String selectedValue = comboFirstSearch.getSelectedItem().toString();

        if (selectedValue.equals(NO_OF_AVAILABLE_CARS) || selectedValue.equals(FIRST_AVAILABLE_CAR) || selectedValue.equals(ALL_MANUFACTURERS) || selectedValue.equals(EXPIRED_MAINTENANCE_CERTIFICATE)) {
            txtFirstSearch.setVisible(false);
        } else {
            txtFirstSearch.setVisible(true);
        }


    }//GEN-LAST:event_comboFirstSearchActionPerformed

    private void comboSecondarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSecondarySearchActionPerformed

        String selectedValue = comboFirstSearch.getSelectedItem().toString();

        if (selectedValue.equals(NO_OF_AVAILABLE_CARS) || selectedValue.equals(FIRST_AVAILABLE_CAR) || selectedValue.equals(ALL_MANUFACTURERS) || selectedValue.equals(EXPIRED_MAINTENANCE_CERTIFICATE)) {
            txtSecondarySearch.setVisible(false);
        } else {
            txtSecondarySearch.setVisible(true);
        }
    }//GEN-LAST:event_comboSecondarySearchActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        lowerPanel.remove(this);
        CardLayout layout = (CardLayout) lowerPanel.getLayout();
        layout.previous(lowerPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed

        int selectedRow = tblCarDetails.getSelectedRow();

        if (!(selectedRow < 0)) {
            Car car = (Car) tblCarDetails.getValueAt(selectedRow, 0);
            ViewCarDetailsPanel viewCarDetailsPanel = new ViewCarDetailsPanel(lowerPanel, car, carInformationList);
            lowerPanel.add("ViewCarDetailsPanel", viewCarDetailsPanel);
            CardLayout cardLayout = (CardLayout) lowerPanel.getLayout();
            cardLayout.next(lowerPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtFirstSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstSearchActionPerformed

    private void btnSecondarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSecondarySearchActionPerformed

        btnSecondarySearch.setVisible(false);
        btnHideSecondarySearch.setVisible(true);
        lblSecondarySearch.setVisible(true);
        comboSecondarySearch.setVisible(true);
        comboSecondarySearch.setEnabled(true);
        txtSecondarySearch.setVisible(true);
    }//GEN-LAST:event_btnSecondarySearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String searchFilter = txtFirstSearch.getText().trim();

        filterResults(comboFirstSearch.getSelectedItem().toString(), txtFirstSearch.getText().trim(), carInformationList.getCarList());

        if (comboSecondarySearch.isEnabled()) {

            if (newCarList != null) {
                filterResults(comboSecondarySearch.getSelectedItem().toString(), txtSecondarySearch.getText().trim(), newCarList);
            }
        }

        if (newCarList != null) {
            populateTable(newCarList);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnHideSecondarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHideSecondarySearchActionPerformed

        btnHideSecondarySearch.setVisible(false);
        btnSecondarySearch.setVisible(true);

        lblSecondarySearch.setVisible(false);
        comboSecondarySearch.setVisible(false);
        comboSecondarySearch.setEnabled(false);
        txtSecondarySearch.setVisible(false);
    }//GEN-LAST:event_btnHideSecondarySearchActionPerformed

    private void txtAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvailableCarsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvailableCarsActionPerformed

    private void txtLastUpdateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastUpdateTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastUpdateTimeActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed

        populateTable(carInformationList.getCarList());
        txtFirstSearch.setVisible(false);
        txtSecondarySearch.setVisible(false);

        lblSecondarySearch.setVisible(false);
        comboSecondarySearch.setVisible(false);
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtUnavailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnavailableCarsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnavailableCarsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int minSeats = Integer.parseInt(cmbMinSeats.getSelectedItem().toString());
        int maxSeats = Integer.parseInt(cmbMaxSeats.getSelectedItem().toString());

        List<Car> tempList = carInformationList.getCarList().stream().filter(car -> car.getMinSeats() >= minSeats).collect(Collectors.toList());
        tempList = tempList.stream().filter(car -> car.getMaxSeats() <= maxSeats).collect(Collectors.toList());
        tempList = tempList.stream().filter(car -> car.isIsAvailable() == true).collect(Collectors.toList());

        populateTable(tempList);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void filterResults(String filter, String searchText, List<Car> carList) {
        switch (filter) {
            case MODEL:
                if (searchText.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please enter the model name");
                } else {
                    newCarList = carList.stream().filter(car -> car.getModel().equalsIgnoreCase(searchText)).collect(Collectors.toList());
                }
                break;

            case CARS_IN_CITY:
                if (searchText.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please enter the city name");
                } else {
                    newCarList = carList.stream().filter(car -> car.getAvailableCity().equalsIgnoreCase(searchText)).collect(Collectors.toList());
                    newCarList = newCarList.stream().filter(car -> car.isIsAvailable() == true).collect(Collectors.toList());
                }
                break;

            case EXPIRED_MAINTENANCE_CERTIFICATE:
                newCarList = carList.stream().filter(car -> car.hasMaintenanceCertificateExpired() == false).collect(Collectors.toList());
                break;

            case FIRST_AVAILABLE_CAR:

                newCarList = Arrays.asList(carList.stream().filter(car -> car.isIsAvailable() == true).collect(Collectors.toList()).get(0));
                break;

            case MANUFACTURING_YEAR:

                if (searchText.equals("") || searchText.length() != 4) {
                    JOptionPane.showMessageDialog(null, "Please enter valid Manufacturing year");
                }

                try {
                    newCarList = carList.stream().filter(car -> car.getManufacturedYear() == Integer.parseInt(searchText)).collect(Collectors.toList());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please enter only numbers");
                }
                break;

            case MAXIMUM_SEATS:
                if (searchText.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please maximum number of seats");
                }

                try {
                    newCarList = carList.stream().filter(car -> car.getMaxSeats() == Integer.parseInt(searchText)).collect(Collectors.toList());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Please enter numbers only");
                }
                break;

            case MINIMUM_SEATS:
                if (searchText.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please minimum number of seats");
                }

                try {
                    newCarList = carList.stream().filter(car -> car.getMinSeats() == Integer.parseInt(searchText)).collect(Collectors.toList());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Please enter numbers only");
                }
                break;

            case MODEL_NUMBER:

                newCarList = carList.stream().filter(car -> car.getModelNumber().equalsIgnoreCase(searchText)).collect(Collectors.toList());
                break;

            case SERIAL_NUMBER:
                try {
                    newCarList = carList.stream().filter(car -> car.getSerial_num() == Integer.parseInt(searchText)).collect(Collectors.toList());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please input numbers only");
                }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnHideSecondarySearch;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSecondarySearch;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbMaxSeats;
    private javax.swing.JComboBox cmbMinSeats;
    private javax.swing.JComboBox comboFirstSearch;
    private javax.swing.JComboBox comboSecondarySearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAllManufacturers;
    private javax.swing.JLabel lblAvailableCars;
    private javax.swing.JLabel lblFleetUpdateTime;
    private javax.swing.JLabel lblMaxSeats;
    private javax.swing.JLabel lblMinSeats;
    private javax.swing.JLabel lblSearch1;
    private javax.swing.JLabel lblSecondarySearch;
    private javax.swing.JLabel lblUnAvailableCars1;
    private javax.swing.JTable tblCarDetails;
    private javax.swing.JTextArea txtAllManufacturers;
    private javax.swing.JTextField txtAvailableCars;
    private javax.swing.JTextField txtFirstSearch;
    private javax.swing.JTextField txtLastUpdateTime;
    private javax.swing.JTextField txtSecondarySearch;
    private javax.swing.JTextField txtUnavailableCars;
    // End of variables declaration//GEN-END:variables

    public void populateTable(List<Car> cars) {
        DefaultTableModel dtm = (DefaultTableModel) tblCarDetails.getModel();
        dtm.setRowCount(0);

        for (Car car : cars) {
            Object[] row = new Object[dtm.getColumnCount()];
            boolean isAvailable = car.isIsAvailable();
//            String setAvailability;
//            if (isAvailable) {
//                setAvailability = "Yes";
//            } else {
//                setAvailability = "No";
//            }

            row[0] = car;
            row[1] = car.isIsAvailable();
            row[2] = car.getSerial_num();
            row[3] = car.getManufacturedYear();
            row[4] = car.getMaxSeats();
            row[5] = car.getAvailableCity();
            row[6] = car.getModelNumber();
            row[7] = car.getMinSeats();

            dtm.addRow(row);

        }

    }

    private void populatCarAvailability() {

        txtAvailableCars.setText(String.valueOf(carInformationList.getCarList().stream().filter(car -> car.isIsAvailable() == true).collect(Collectors.toList()).size()));
        txtUnavailableCars.setText(String.valueOf(carInformationList.getCarList().stream().filter(car -> car.isIsAvailable() == false).collect(Collectors.toList()).size()));
    }

    private void populateManufacturers(List<Car> cars) {

        Set<String> manufacturers = new HashSet<>();

        for (Car car : cars) {
            manufacturers.add(car.getModel());
        }
        txtAllManufacturers.setText(manufacturers.toString().replace("[", "").replace("]", ""));

    }

}
